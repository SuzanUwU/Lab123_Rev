Creating a new Git User and Linking an Email Address to this User

git config --global user.name “Suzan” 
git config --global user.email suzan@gmail.com
git config --list // To verify new changes

-----------------------------------------------------------------------------------------------------------

Creating a new Local Git Repository

cd “C:\Local_Git_Repository” // Move to the directory where you can create a new Git repository.

mkdir Lab1 // Create a new Directory for your new Git Repository:
* mkdir creates directory and cd opens that directory. So, cd Lab1 opens that directory.

git init // Initialize a new Git Repository by creating a .git subdirectory. 
* Run only once per repository or it will override!

git status // To check uncommitted files

git add HelloWorld.py // Staging files in Git to prepare them for the “Commit” Action

git commit -m “Write a comment here” // If you forget to add a comment when committing, error!

git diff // View the file differences 
*For No Next Tag (press RETURN) error, click Q or Ctrl + C

-----------------------------------------------------------------------------------------------------------

Git Branches

git branch “branch1” // create a new git branch

git checkout “branch1” // to check out or switch to a different Git local branch

git branch // check which branch you are in. 
==> It will show * master if you are in master branch and * branch_name if you’re in elsewhere

git merge “branch_name” // where branch_name is the one that will COME combine 
==> If you’re trying to merge branch1 into branch2, then you need to git checkout branch2. Stay where you are combining into. 

-----------------------------------------------------------------------------------------------------------

GitHub Account

git remote add origin https://github.com/SuzanUwU/Lab123_Rev.git

git remote -v // to check if the current local git repository has the remote repository server correctly configured

git push --set-upstream origin master // for the first push
git push -u origin // for the second and beyond pushes after connecting

-----------------------------------------------------------------------------------------------------------

GitHub ReadMe File

1. Create a new txt file
2. Write stuff to read idk
3. git add ReadMe.md // add to local
4. git commit -m "Comment" // commit
5. git push -u origin // push to GitHub

-----------------------------------------------------------------------------------------------------------

Git Tags

* you need to be in the correct branch btw
git tag -a v1.0 -m "Comment about v1.0" // create a new Git Tag
git push origin v1.0 // git push for tag

-----------------------------------------------------------------------------------------------------------

Git Release

- tag icon at GitHub Repository
- click Releases
- Create a new release
- click Choose a tag
- select v1.0 in the Release title field
- enter "some text idk"
- then Describe this release field
- click Publish release

-----------------------------------------------------------------------------------------------------------

Git Submodules

1. cd "where you want to add"
2. git submodule add link_of_someone_else_git // now a git submodule is addred locally
3. git add .gitmodules // cuz that's where the git submodules went to
4. git commit -m "comments"
5. git push
6. go check GitHub for .gitmodules

160e04d is the hex numbers for Lab123_Rev 

-----------------------------------------------------------------------------------------------------------

Git Collaborators

1. Settings
2. Collaborators and teams
3. Add people

git clone <url of repository to clone>
git log // for commit history in other's Lab1 Github repository

-----------------------------------------------------------------------------------------------------------

Q1: Why is it necessary to have an intermediate “git add” command in the git workflow for a commit?
Because it allows selective committing, avoid unintended committing, review changes and collaborate with team members.

Q2: What is the purpose of describing the changes in the commit command?
	For documentation, communication, future reference, and tracking purposes.

Q3: What does the green and red colour coded lines mean when you issue git diff?
	Red: - this line is the older version
	Green: + this line is the newer version

Q4: Under what circumstances will you use branching in a software development project?
	For feature development, bug fixing, prototyping, code reviews, collaborating with multiple teams, maintenance and experimenting. 

Q5: What does the term origin refer to in the command git push –set-upstream origin master?
	Origin Is a conventional name for a remote repository. Also a default remote name in Git. It connects between local and remote repositories.

Q6: Do you need the --set-upstream option for subsequent git push commands?
	No, because –set-upstream is only for the initial set up. First push is *git push -u origin “branch_name”* subsequent push is git push.

-----------------------------------------------------------------------------------------------------------

Local

1) git init
2) git add <file name>
	git commit -m "comment"
3) git branch <name>
	git checkout <branch_name>
	git merge <branch_name> // merge branch_name merges TO where you are
4) git remote add ...
	git push ...

Remote
 
5) git clone <url>
6) // back to step 3 then come back to step 7
7) git push // again for updates
8) git pull // take new changes from others to me
	// git pull to yourself might have errors decide yourself what codes to keep cuz Git won't merge with merge conflict errors
	// then git push again so that yours is up to date with the team

-----------------------------------------------------------------------------------------------------------








